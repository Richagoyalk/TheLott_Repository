package TestCase_Powerball;

/// This Test Scenario covers Test cases involved in :
//1. Adding Powerball QuickPlay Tickets to the cart.
//2. Navigating to the Powerball via the Play Menu in the NavBar
//3. Checking the Ticket titles on the Powerball page.
//4. Adding several Ticket combinations to the Cart keeping a count of items and total amount.
// All the Ticket Titles, Games, GameTypes and Cost are tested using the Assert functionality.
////** A database e.g. Excel sheet can be used to add combinations and test in loops.
//5. Navigate to the Checkout page via the Cart link Click and Checkout button.
//6. Use Assert functionality to test the tickets added, the total count of tickets added and
//7. Check the total amount of cart by calculating the ticket values in real time.
//8. Test the Empty cart functionality.

//Generated by Selenium IDE
import org.junit.Test;
import org.junit.Before;
import org.junit.After;
import static org.junit.Assert.*;
import static org.hamcrest.CoreMatchers.is;
import static org.hamcrest.core.IsNot.not;
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.firefox.FirefoxDriver;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.remote.RemoteWebDriver;
import org.openqa.selenium.remote.DesiredCapabilities;
import org.openqa.selenium.Dimension;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.interactions.Actions;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;

//import TestCase_Powerball.TestCasePowerballToCartQuickpickTest;

import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.Alert;
import org.openqa.selenium.Keys;
import java.util.*;
import java.net.URL;
import java.time.Duration;
import java.util.*;
import java.net.MalformedURLException;
import java.net.URL;
import org.junit.internal.TextListener;
import org.junit.runner.JUnitCore;
import org.junit.runner.Result;
public class TestCasePowerballToCartQuickpickTest {
private WebDriver driver;
private Map<String, Object> vars;
JavascriptExecutor js;
public static void main(String args[]) {
	  JUnitCore junit = new JUnitCore();
	  junit.addListener(new TextListener(System.out));
	  Result result = junit.run(TestCasePowerballToCartQuickpickTest.class); 
	  if (result.getFailureCount() > 0) {
	    System.out.println("Test Failed.");
	    System.exit(1);
	  } else {
	    System.out.println("Test Passed.");
	    System.exit(0);
	  }
	}
@Before
public void setUp() {
 System.setProperty("webdriver.chrome.driver","C:\\Users\\richa\\Downloads\\chromedriver_win32\\chromedriver.exe");
 driver = new ChromeDriver();
 js = (JavascriptExecutor) driver;
 vars = new HashMap<String, Object>();
}
@After
public void tearDown() {
 driver.quit();
}
@Test
public void testCasePowerballToCartQuickpick() {
 driver.get("https://www.thelott.com/");
 driver.manage().window().setSize(new Dimension(1382, 886));
 driver.findElement(By.cssSelector(".ico-UiAngleDwn")).click();
 driver.findElement(By.cssSelector(".xsmall-collapse:nth-child(4)")).click();
 driver.findElement(By.id("playmenu")).click();
 assertThat(driver.findElement(By.cssSelector("#powerball-tile span")).getText(), is("Powerball"));
 driver.findElement(By.cssSelector("#powerball-tile span")).click();
 {
     WebDriverWait wait = new WebDriverWait(driver,Duration.ofSeconds(30));
     wait.until(ExpectedConditions.presenceOfElementLocated(By.cssSelector(".quickpick-title")));
   }
 driver.findElement(By.cssSelector(".quickpick-title")).click();
 assertThat(driver.findElement(By.cssSelector("li:nth-child(2) .name > em")).getText(), is("MINI"));
 assertThat(driver.findElement(By.cssSelector("li:nth-child(2) .count")).getText(), is("8 Game"));
 assertThat(driver.findElement(By.cssSelector("li:nth-child(2) .gametype")).getText(), is("Standard entry"));
 assertThat(driver.findElement(By.cssSelector("li:nth-child(2) .cost > em")).getText(), is("$9.70"));
 vars.put("cost1", driver.findElement(By.cssSelector("li:nth-child(2) .cost > em")).getText());
 driver.findElement(By.cssSelector("li:nth-child(2) .cart")).click();
 assertThat(driver.findElement(By.cssSelector("li:nth-child(3) .name > em")).getText(), is("REGULAR"));
 assertThat(driver.findElement(By.cssSelector("li:nth-child(3) .count")).getText(), is("12 Game"));
 assertThat(driver.findElement(By.cssSelector("li:nth-child(3) .gametype")).getText(), is("Standard entry"));
 assertThat(driver.findElement(By.cssSelector("li:nth-child(3) .cost > em")).getText(), is("$14.60"));
 vars.put("cost2", driver.findElement(By.cssSelector("li:nth-child(3) .cost > em")).getText());
 driver.findElement(By.cssSelector("li:nth-child(3) .cart")).click();
 assertThat(driver.findElement(By.cssSelector("li:nth-child(4) .name > em")).getText(), is("SUPER"));
 assertThat(driver.findElement(By.cssSelector("li:nth-child(4) .count")).getText(), is("18 Game"));
 assertThat(driver.findElement(By.cssSelector("li:nth-child(4) .gametype")).getText(), is("Standard entry"));
 assertThat(driver.findElement(By.cssSelector("li:nth-child(4) .cost > em")).getText(), is("$21.80"));
 vars.put("cost3", driver.findElement(By.cssSelector("li:nth-child(4) .cost > em")).getText());
 assertThat(driver.findElement(By.cssSelector(".powerhit-pick .name > em")).getText(), is("POWERBALL GUARANTEED!"));
 assertThat(driver.findElement(By.cssSelector(".powerhit-pick .count")).getText(), is("1 Game"));
 assertThat(driver.findElement(By.cssSelector(".powerhit-pick .gametype")).getText(), is("PowerHit Entry"));
 assertThat(driver.findElement(By.cssSelector(".powerhit-pick .cost > em")).getText(), is("$24.30"));
 vars.put("cost4", driver.findElement(By.cssSelector(".powerhit-pick .cost > em")).getText());
 driver.findElement(By.cssSelector("li:nth-child(4) .cart")).click();
 driver.findElement(By.cssSelector(".powerhit-pick .cart")).click();
 assertThat(driver.findElement(By.cssSelector("li:nth-child(5) .name > em")).getText(), is("MEGA"));
 assertThat(driver.findElement(By.cssSelector("li:nth-child(5) .count")).getText(), is("25 Game"));
 assertThat(driver.findElement(By.cssSelector("li:nth-child(5) .gametype")).getText(), is("Standard entry"));
 assertThat(driver.findElement(By.cssSelector("li:nth-child(5) .cost > em")).getText(), is("$30.30"));
 vars.put("cost5", driver.findElement(By.cssSelector("li:nth-child(5) .cost > em")).getText());
 driver.findElement(By.cssSelector("li:nth-child(5) .cart")).click();
 assertThat(driver.findElement(By.cssSelector("li:nth-child(6) .name > em")).getText(), is("JUMBO"));
 assertThat(driver.findElement(By.cssSelector("li:nth-child(6) .count")).getText(), is("36 Game"));
 assertThat(driver.findElement(By.cssSelector("li:nth-child(6) .gametype")).getText(), is("Standard entry"));
 assertThat(driver.findElement(By.cssSelector("li:nth-child(6) .cost > em")).getText(), is("$43.70"));
 vars.put("cost6", driver.findElement(By.cssSelector("li:nth-child(6) .cost > em")).getText());
 assertThat(driver.findElement(By.cssSelector("li:nth-child(7) .name > em")).getText(), is("MAXI"));
 assertThat(driver.findElement(By.cssSelector("li:nth-child(7) .count")).getText(), is("50 Game"));
 assertThat(driver.findElement(By.cssSelector("li:nth-child(7) .gametype")).getText(), is("Standard entry"));
 assertThat(driver.findElement(By.cssSelector("li:nth-child(7) .cost > em")).getText(), is("$60.60"));
 vars.put("cost7", driver.findElement(By.cssSelector("li:nth-child(7) .cost > em")).getText());
 driver.findElement(By.cssSelector("li:nth-child(6) .cart")).click();
 driver.findElement(By.cssSelector("li:nth-child(7) .cart")).click();
 driver.findElement(By.cssSelector(".items")).click();
 driver.findElement(By.cssSelector(".cart-preview-menu-row > .button")).click();
 assertThat(driver.findElement(By.cssSelector(".lerv-offer-details > .text")).getText(), is("7 Tickets subtotal"));
 assertThat(driver.findElement(By.cssSelector(".purchase-summary > .amount")).getText(), is("$205.00"));
 vars.put("amount", driver.findElement(By.cssSelector(".purchase-summary > .amount")).getText());
 assertThat(driver.findElement(By.cssSelector(".columns:nth-child(1) > div:nth-child(1) > .au-target:nth-child(1) .product-label:nth-child(1)")).getText(), is("Powerball"));
 assertThat(driver.findElement(By.cssSelector(".columns:nth-child(1) > div:nth-child(1) > .au-target:nth-child(1) .entry-text:nth-child(4) > span:nth-child(1)")).getText(), is("50 Game Standard entry"));
 assertThat(driver.findElement(By.cssSelector(".columns:nth-child(1) > div:nth-child(1) > .au-target:nth-child(1) .entry-text:nth-child(4) > span:nth-child(1)")).getText(), is("50 Game Standard entry"));
 assertThat(driver.findElement(By.cssSelector(".columns:nth-child(1) > div:nth-child(1) > .au-target:nth-child(1) .entry-price:nth-child(2) > span:nth-child(1)")).getText(), is("$60.60"));
 driver.findElement(By.cssSelector(".purchase-button-container .text")).click();
 {
   WebElement element = driver.findElement(By.cssSelector(".loading"));
   Actions builder = new Actions(driver);
   builder.moveToElement(element).perform();
 }
 {
   WebElement element = driver.findElement(By.tagName("body"));
   Actions builder = new Actions(driver);
   builder.moveToElement(element, 0, 0).perform();
 }
 js.executeScript("window.scrollTo(0,0)");
 driver.findElement(By.cssSelector(".\\_modalCloseIcon_75w33_1")).click();
 driver.findElement(By.linkText("Empty Cart")).click();
 driver.findElement(By.cssSelector(".button:nth-child(2)")).click();
}
}
