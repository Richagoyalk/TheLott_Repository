package TestCase_Powerball;
/// This Test Scenario covers Test cases involved in :
//1. Adding Powerball Create your own->Powerhit Tickets to the cart.
//2. Navigating to the Powerball via the Play Menu in the NavBar
//3. Choose option from the dropdown and check the dependant values on the Powerball page. 
/// Test the Fast Fill and Clear all functionality
//4. Adding several Ticket combinations to the Cart keeping a count of items and total amount.
//All the Ticket Titles, Games, GameTypes and Cost are tested using the Assert functionality.
////** A database e.g. Excel sheet can be used to add combinations and test in loops.
//5. Navigate to the Checkout page via the Cart link Click and Checkout button.
//6. Use Assert functionality to test the tickets added, the total count of tickets added and
//7. Check the total amount of cart by calculating the ticket values in real time.
//8. Test the Empty cart functionality.

//Generated by Selenium IDE
import org.junit.Test;
import org.junit.Before;
import org.junit.After;
import static org.junit.Assert.*;
import static org.hamcrest.CoreMatchers.is;
import static org.hamcrest.core.IsNot.not;
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.firefox.FirefoxDriver;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.remote.RemoteWebDriver;
import org.openqa.selenium.remote.DesiredCapabilities;
import org.openqa.selenium.Dimension;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.interactions.Actions;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.Alert;
import org.openqa.selenium.Keys;
import java.util.*;
import java.net.MalformedURLException;
import java.net.URL;
import java.time.Duration;

import org.junit.internal.TextListener;
import org.junit.runner.JUnitCore;
import org.junit.runner.Result;
public class TestCasePowerballCustomisePowerhit2ToCartTest {
private WebDriver driver;
private Map<String, Object> vars;
JavascriptExecutor js;
public static void main(String args[]) {
	  JUnitCore junit = new JUnitCore();
	  junit.addListener(new TextListener(System.out));
	  Result result = junit.run(TestCasePowerballCustomisePowerhit2ToCartTest.class); 
	  if (result.getFailureCount() > 0) {
	    System.out.println("Test Failed.");
	    System.exit(1);
	  } else {
	    System.out.println("Test Passed.");
	    System.exit(0);
	  }
	}
@Before
public void setUp()  {
System.setProperty("webdriver.chrome.driver","C:\\Users\\richa\\Downloads\\chromedriver_win32\\chromedriver.exe");
 driver = new ChromeDriver();
 js = (JavascriptExecutor) driver;
 vars = new HashMap<String, Object>();
}
@After
public void tearDown() {
 driver.quit();
}
@Test
public void testCasePowerballCustomisePowerhit2ToCart() {
 driver.get("https://www.thelott.com/");
 driver.manage().window().setSize(new Dimension(1382, 886));
 driver.findElement(By.id("playmenu")).click();
 driver.findElement(By.cssSelector("#powerball-tile span")).click();
 driver.findElement(By.cssSelector(".marked-entry-title")).click();
 driver.findElement(By.cssSelector(".au-target:nth-child(3) > .medium-up-only")).click();
 {
   String value = driver.findElement(By.cssSelector(".system .select > .au-target")).getAttribute("value");
   assertThat(value, is("PowerHit"));
 }
 driver.findElement(By.cssSelector(".system .select > .au-target")).click();
 {
   WebElement dropdown = driver.findElement(By.cssSelector(".system .select > .au-target"));
   dropdown.findElement(By.xpath("//option[. = 'PowerHit System 10']")).click();
 }
 driver.findElement(By.cssSelector(".games .select > .au-target")).click();
 {
   WebElement dropdown = driver.findElement(By.cssSelector(".games .select > .au-target"));
   dropdown.findElement(By.xpath("//option[. = '17 Games - $49,502.30']")).click();
 }
 {
   String value = driver.findElement(By.cssSelector(".games .select > .au-target")).getAttribute("value");
   assertThat(value, is("17 Games - $49,502.30"));
 }
 driver.findElement(By.cssSelector(".buttons:nth-child(2) > .fast-select > span")).click();
 {
   WebDriverWait wait = new WebDriverWait(driver,Duration.ofSeconds(30));
   wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector(".cart-button:nth-child(1)")));
 }
 driver.findElement(By.cssSelector(".cart-button:nth-child(1)")).click();
 driver.findElement(By.cssSelector(".cart-preview-menu-row > .button")).click();
 assertThat(driver.findElement(By.cssSelector(".columns:nth-child(1) > div:nth-child(1) .entry-text:nth-child(4) > span:nth-child(1)")).getText(), is("17 Game PowerHit System 10 entry"));
 assertThat(driver.findElement(By.cssSelector(".purchase-summary > .amount")).getText(), is("$49,502.30"));
 driver.findElement(By.cssSelector(".purchase-button-container .text")).click();
 {
   WebElement element = driver.findElement(By.cssSelector(".loading"));
   Actions builder = new Actions(driver);
   builder.moveToElement(element).perform();
 }
 {
   WebElement element = driver.findElement(By.tagName("body"));
   Actions builder = new Actions(driver);
   builder.moveToElement(element, 0, 0).perform();
 }
 driver.findElement(By.cssSelector(".\\_modalCloseIcon_75w33_1")).click();
 driver.findElement(By.linkText("Empty Cart")).click();
 driver.findElement(By.cssSelector(".button:nth-child(2)")).click();
}
}
